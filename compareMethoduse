import java.io.*;
import java.util.*;
 


class coord{
    
    int x;
    int y;
    coord(int x,int y){
        this.x=x;
        this.y=y;
    }
}
class pair implements Comparator<coord>{
    
    
 public int compare(coord that,coord to){
  
    int temp=Integer.compare(that.x, to.x);
   //  System.out.println(that.x+" "+that.y+"\\"+to.x+" "+to.y);
    return temp==0?(-1*Integer.compare(that.y, to.y)):temp;


}   
    
}
public class jam
{
  
	public static void main(String args[]) throws Exception
	{
		InputReader sc=new InputReader(System.in);		
		PrintWriter w=new PrintWriter(System.out);
          
                
                int t=sc.nextInt();
                while(t>0){
                int n=sc.nextInt();
               ArrayList<coord> h=new ArrayList<>();
                int x=0,nn=n;
                while(n>0){
                                    
                    h.add(new coord(sc.nextInt(),sc.nextInt()));
                  
                    n--;
                }
                int st=1,prevx=0,prevy=0;
                double distance=0.0;
               Collections.sort(h,new pair());
                for(coord i:h){
                    if(st==1){
                          prevx=i.x;
                          prevy=i.y;
                          st++;
                          continue;
                      }
                      	int temp2 = (i.x - prevx)*(i.x - prevx) + (i.y - prevy)*(i.y - prevy); 
				distance += Math.pow(temp2, 0.5);
                   prevx=i.x;
                   prevy=i.y;
                }
                    //System.out.format("%.2f",distance);
                    System.out.printf("%.2f", distance);
                    System.out.println("");
                    t--;
                }
                
                
                
              
             
          
                   
             
                              
         
        
           
         
                    
                    
                }
              
                
                
                
			
        }



	 class InputReader
	{
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;
		private SpaceCharFilter filter;
		
		public InputReader(InputStream stream)
		{
			this.stream = stream;
		}
		
		public int read()
		{
			if (numChars==-1) 
				throw new InputMismatchException();
			
			if (curChar >= numChars)
			{
				curChar = 0;
				try 
				{
					numChars = stream.read(buf);
				}
				catch (IOException e)
				{
					throw new InputMismatchException();
				}
				
				if(numChars <= 0)				
					return -1;
			}
			return buf[curChar++];
		}
	 
		public String nextLine()
		{
			BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
			String str = "";
            try
            {
                str = br.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
		}
		public int nextInt()
		{
			int c = read();
			
			while(isSpaceChar(c)) 
				c = read();
			
			int sgn = 1;
			
			if (c == '-') 
			{
				sgn = -1;
				c = read();
			}
			
			int res = 0;
			do 
			{
				if(c<'0'||c>'9') 
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			}
			while (!isSpaceChar(c)); 
			
			return res * sgn;
		}
		
		public long nextLong() 
		{
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') 
			{
				sgn = -1;
				c = read();
			}
			long res = 0;
			
			do 
			{
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			}
			while (!isSpaceChar(c));
				return res * sgn;
		}
		
		public double nextDouble() 
		{
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') 
			{
				sgn = -1;
				c = read();
			}
			double res = 0;
			while (!isSpaceChar(c) && c != '.') 
			{
				if (c == 'e' || c == 'E')
					return res * Math.pow(10, nextInt());
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			}
			if (c == '.') 
			{
				c = read();
				double m = 1;
				while (!isSpaceChar(c)) 
				{
					if (c == 'e' || c == 'E')
						return res * Math.pow(10, nextInt());
					if (c < '0' || c > '9')
						throw new InputMismatchException();
					m /= 10;
					res += (c - '0') * m;
					c = read();
				}
			}
			return res * sgn;
		}
		
		public String readString() 
		{
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do 
			{
				res.appendCodePoint(c);
				c = read();
			} 
			while (!isSpaceChar(c));
			
			return res.toString();
		}
	 
		public boolean isSpaceChar(int c) 
		{
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}
	 
		public String next() 
		{
			return readString();
		}
		
		public interface SpaceCharFilter 
		{
			public boolean isSpaceChar(int ch);
		}
	}
 
