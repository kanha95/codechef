import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.*;


class pair{
    int x,y,z;
    pair(int x,int y,int z){
        this.x=x;
        this.y=y;
        this.z=z;
    }
      @Override
    public int hashCode() {
        return this.x ^ this.y;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        pair other = (pair) obj;
        if (x != other.x)
            return false;
        if (y != other.y)
            return false;
        return true;
    }
  
    
}

 
class Main{
    
 
    static int gcd(int a,int b){
        if(b==0) return a;
        return gcd(b,a%b);
    }
	
    public static void main(String[] args){
        
             InputReader sc=new InputReader(System.in); 
             
           int t=sc.nextInt();
           
           while(t>0){
               int n=sc.nextInt();
               HashMap<pair,Integer> tm=new HashMap<>();
               
               for (int i = 0; i < n; i++) {
                   int a=sc.nextInt();
                   int b=sc.nextInt();
                   int c=sc.nextInt();
                   
                   boolean bb=false;
                   for(Map.Entry<pair,Integer> m:tm.entrySet()){
                       int t1=m.getKey().x;
                       int t2=m.getKey().y;
                       int t3=m.getKey().z;
                       int g1=gcd(a,t1);
                       int g2=gcd(b,t2);
                       int g3=gcd(c,t3);
                      
                       if(g1==a){
                           int tmp=t1/a;
                           if(g2==b){
                               if(t2/b==tmp){
                                  if(c*tmp!=t3){
                                      tm.put(new pair(t1,t2,t3),tm.get(new pair(t1,t2,t3))+1);
                                      bb=true;
                                      break;
                                  }      
                               }
                           }
                       }
                       if(g1==t1){
                           int tmp=a/t1;
                           if(g2==t2){
                               if(b/t2==tmp){
                                  if(t3*tmp!=c){
                                      tm.put(new pair(t1,t2,t3),tm.get(new pair(t1,t2,t3))+1);
                                      bb=true;
                                      break;
                                  }      
                               }
                           }
                       }
                       
                   }
                   
                   if(!bb){
                       tm.put(new pair(a,b,c), 1);
                   }
               }
               int max=Integer.MIN_VALUE;
               for(Map.Entry<pair,Integer> m:tm.entrySet()){
               max=Math.max(max, m.getValue());
               }
               
               System.out.println(max);
               t--;
           }
             
           
             
        }
        
        
        }
        
        
    
    
    
 
 
 
 class InputReader
	{
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;
		private SpaceCharFilter filter;
		
		public InputReader(InputStream stream)
		{
			this.stream = stream;
		}
		
		public int read()
		{
			if (numChars==-1) 
				throw new InputMismatchException();
			
			if (curChar >= numChars)
			{
				curChar = 0;
				try 
				{
					numChars = stream.read(buf);
				}
				catch (IOException e)
				{
					throw new InputMismatchException();
				}
				
				if(numChars <= 0)				
					return -1;
			}
			return buf[curChar++];
		}
	 
		public String nextLine()
		{
			BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
			String str = "";
            try
            {
                str = br.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
		}
		public int nextInt()
		{
			int c = read();
			
			while(isSpaceChar(c)) 
				c = read();
			
			int sgn = 1;
			
			if (c == '-') 
			{
				sgn = -1;
				c = read();
			}
			
			int res = 0;
			do 
			{
				if(c<'0'||c>'9') 
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			}
			while (!isSpaceChar(c)); 
			
			return res * sgn;
		}
		
		public long nextLong() 
		{
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') 
			{
				sgn = -1;
				c = read();
			}
			long res = 0;
			
			do 
			{
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			}
			while (!isSpaceChar(c));
				return res * sgn;
		}
		
		public double nextDouble() 
		{
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') 
			{
				sgn = -1;
				c = read();
			}
			double res = 0;
			while (!isSpaceChar(c) && c != '.') 
			{
				if (c == 'e' || c == 'E')
					return res * Math.pow(10, nextInt());
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			}
			if (c == '.') 
			{
				c = read();
				double m = 1;
				while (!isSpaceChar(c)) 
				{
					if (c == 'e' || c == 'E')
						return res * Math.pow(10, nextInt());
					if (c < '0' || c > '9')
						throw new InputMismatchException();
					m /= 10;
					res += (c - '0') * m;
					c = read();
				}
			}
			return res * sgn;
		}
		
		public String readString() 
		{
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do 
			{
				res.appendCodePoint(c);
				c = read();
			} 
			while (!isSpaceChar(c));
			
			return res.toString();
		}
	 
		public boolean isSpaceChar(int c) 
		{
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}
	 
		public String next() 
		{
			return readString();
		}
		
		public interface SpaceCharFilter 
		{
			public boolean isSpaceChar(int ch);
		}
	} 
